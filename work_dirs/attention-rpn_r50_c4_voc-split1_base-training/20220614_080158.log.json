{"env_info": "sys.platform: linux\nPython: 3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 06:04:18) [GCC 10.3.0]\nCUDA available: True\nGPU 0,1: Quadro P5000\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.30978841_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.0-Product Build 20211112 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.5.5\nMMCV: 1.4.7\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.22.0+7daaa72", "config": "img_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_multi_pipelines = dict(\n    query=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Resize',\n            img_scale=[(1000, 440), (1000, 472), (1000, 504), (1000, 536),\n                       (1000, 568), (1000, 600)],\n            keep_ratio=True,\n            multiscale_mode='value'),\n        dict(type='RandomFlip', flip_ratio=0.0),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ],\n    support=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='CropResizeInstance',\n            num_context_pixels=16,\n            target_size=(320, 320)),\n        dict(type='RandomFlip', flip_ratio=0.0),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ])\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='RandomFlip'),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/'\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='QueryAwareDataset',\n        num_support_ways=2,\n        num_support_shots=10,\n        save_dataset=False,\n        dataset=dict(\n            type='FewShotVOCDataset',\n            ann_cfg=[\n                dict(\n                    type='ann_file',\n                    ann_file=\n                    '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt'\n                ),\n                dict(\n                    type='ann_file',\n                    ann_file=\n                    '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n                )\n            ],\n            img_prefix=\n            '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/',\n            multi_pipelines=dict(\n                query=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Resize',\n                        img_scale=[(1000, 440), (1000, 472), (1000, 504),\n                                   (1000, 536), (1000, 568), (1000, 600)],\n                        keep_ratio=True,\n                        multiscale_mode='value'),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ],\n                support=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='CropResizeInstance',\n                        num_context_pixels=16,\n                        target_size=(320, 320)),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ]),\n            classes='BASE_CLASSES_SPLIT1',\n            use_difficult=False,\n            instance_wise=False,\n            min_bbox_area=1024,\n            dataset_name='query_support_dataset')),\n    val=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file=\n                '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2007/ImageSets/Main/test.txt'\n            )\n        ],\n        img_prefix='/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='RandomFlip'),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes='BASE_CLASSES_SPLIT1'),\n    test=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file=\n                '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2007/ImageSets/Main/test.txt'\n            )\n        ],\n        img_prefix='/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='RandomFlip'),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        test_mode=True,\n        classes='BASE_CLASSES_SPLIT1'),\n    model_init=dict(\n        copy_from_train_dataset=False,\n        samples_per_gpu=16,\n        workers_per_gpu=1,\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file=\n                '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt'\n            ),\n            dict(\n                type='ann_file',\n                ann_file=\n                '/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            )\n        ],\n        img_prefix='/home/ghk/workerspace/datasets/detection/voc/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='CropResizeInstance',\n                num_context_pixels=16,\n                target_size=(320, 320)),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        num_base_shots=100,\n        use_difficult=False,\n        instance_wise=True,\n        classes='BASE_CLASSES_SPLIT1',\n        min_bbox_area=1024,\n        dataset_name='model_init'))\nevaluation = dict(interval=6000, metric='mAP')\noptimizer = dict(\n    type='SGD',\n    lr=0.004,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict({'roi_head.bbox_head': dict(lr_mult=2.0)})))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.1,\n    step=[16000])\nrunner = dict(type='IterBasedRunner', max_iters=18000)\nnorm_cfg = dict(type='BN', requires_grad=False)\npretrained = 'open-mmlab://detectron2/resnet50_caffe'\nmodel = dict(\n    type='AttentionRPNDetector',\n    pretrained='open-mmlab://detectron2/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=3,\n        strides=(1, 2, 2),\n        dilations=(1, 1, 1),\n        out_indices=(2, ),\n        frozen_stages=2,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    rpn_head=dict(\n        type='AttentionRPNHead',\n        in_channels=1024,\n        feat_channels=1024,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[2, 4, 8, 16, 32],\n            ratios=[0.5, 1.0, 2.0],\n            scale_major=False,\n            strides=[16]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        num_support_ways=2,\n        num_support_shots=10,\n        roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=1024,\n            featmap_strides=[16]),\n        aggregation_layer=dict(\n            type='AggregationLayer',\n            aggregator_cfgs=[\n                dict(\n                    type='DepthWiseCorrelationAggregator',\n                    in_channels=1024,\n                    with_fc=False)\n            ])),\n    roi_head=dict(\n        type='MultiRelationRoIHead',\n        shared_head=dict(\n            type='ResLayer',\n            pretrained='open-mmlab://detectron2/resnet50_caffe',\n            depth=50,\n            stage=3,\n            stride=2,\n            dilation=1,\n            style='caffe',\n            norm_cfg=dict(type='BN', requires_grad=False),\n            norm_eval=True),\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=1024,\n            featmap_strides=[16]),\n        bbox_head=dict(\n            type='MultiRelationBBoxHead',\n            with_avg_pool=True,\n            roi_feat_size=14,\n            in_channels=2048,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n            patch_relation=True,\n            local_correlation=True,\n            global_relation=True,\n            init_cfg=[\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal', name='patch_relation_branch',\n                        std=0.01)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal', name='patch_relation_fc_cls',\n                        std=0.01)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal', name='patch_relation_fc_reg',\n                        std=0.001)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal',\n                        name='local_correlation_branch',\n                        std=0.01)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal',\n                        name='local_correlation_fc_cls',\n                        std=0.01)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal', name='global_relation_branch',\n                        std=0.01)),\n                dict(\n                    type='Normal',\n                    override=dict(\n                        type='Normal', name='global_relation_fc_cls',\n                        std=0.01))\n            ]),\n        num_support_ways=2,\n        num_support_shots=10),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=12000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=128,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=6000,\n            max_per_img=100,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nnum_support_ways = 2\nnum_support_shots = 10\ncheckpoint_config = dict(interval=6000)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nuse_infinite_sampler = True\nseed = 42\nwork_dir = './work_dirs/attention-rpn_r50_c4_voc-split1_base-training'\ngpu_ids = [0]\n", "seed": 42, "exp_name": "attention-rpn_r50_c4_voc-split1_base-training.py"}
